# This is a basic workflow that is automatically triggered

name: CI/CD workflow

# Controls when the action will run. Workflow runs when automatically triggered
on:
  push:
    branches: [ main ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  publish-techdocs:
    runs-on: ubuntu-latest

    env:
      TECHDOCS_S3_BUCKET_NAME: ${{ secrets.TECHDOCS_S3_BUCKET_NAME }}
      AWS_ACCESS_KEY_ID: ${{ secrets.TECHDOCS_AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.TECHDOCS_AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: 'us-east-1'
      ENTITY_NAMESPACE: 'default'
      ENTITY_KIND: 'component'
      ENTITY_NAME: 'solution001'

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - uses: actions/setup-node@v2
      - uses: actions/setup-python@v2

      # the 3 steps below can be removed if you aren't using plantuml in your documentation
      - name: setup java
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: '11'
      - name: download, validate, install plantuml and its dependencies
        run: |
          curl -o plantuml.jar -L http://sourceforge.net/projects/plantuml/files/plantuml.1.2021.4.jar/download
          echo "be498123d20eaea95a94b174d770ef94adfdca18  plantuml.jar" | sha1sum -c -
          mv plantuml.jar /opt/plantuml.jar
          mkdir -p "$HOME/.local/bin"
          echo $'#!/bin/sh\n\njava -jar '/opt/plantuml.jar' ${@}' >> "$HOME/.local/bin/plantuml"
          chmod +x "$HOME/.local/bin/plantuml"
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          sudo apt-get install -y graphviz
      
      - name: Generate UML
        run: |
          grep '@startuml' -rl --include '*.md' docs | while read -r file ; do
            echo "Generating : $file"
            plantuml -tsvg "$file" 2> >(grep -v "CoreText note:")
          done
      
      - name: Install techdocs-cli
        run: sudo npm install -g @techdocs/cli@0.6.1

      - name: Install mkdocs and mkdocs plugins
        run: python -m pip install mkdocs-techdocs-core==0.*

      - name: Generate docs site
        run: techdocs-cli generate --no-docker --verbose

      - name: Publish docs site
        run:
          techdocs-cli publish --publisher-type awsS3 --storage-name
          $TECHDOCS_S3_BUCKET_NAME --entity
          $ENTITY_NAMESPACE/$ENTITY_KIND/$ENTITY_NAME

  build-and-push:
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.version_timestamp.outputs.version }}
      deploy_folder: ${{ steps.deploy_folder.outputs.deploy_folder }}
      repo_name: ${{steps.get_repo.outputs.name}}
      
    permissions:
      contents: write
      packages: write  
      
    steps:
    - run : echo tenant-example
    - name: Java Code 
      uses: actions/checkout@v2
      with:
          fetch-depth: 0
    
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'
    
    - name: Build with Maven
      run: |
        mvn -B package --file pom.xml -Dmaven.test.skip=true
        
    - name: Determine version 
      id: version_timestamp
      run: |
        echo "::set-output name=version::${REF#refs/heads/}-$(date +%s)"
      env:
          REF: ${{ github.ref }}
          
          
    - name: Get Repo name 
      id: get_repo
      run: |
        echo "::set-output name=name::$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $2}' | sed -e "s/:refs//")"
      env:
          REF: ${{ github.ref }}      
          
    - name: AWS ECR
      uses: kciter/aws-ecr-action@v4

      with:
        access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        account_id: 558232680640
        repo: example-repo
        region: us-east-1
        tags: ${{ steps.version_timestamp.outputs.version }}
        create_repo: false
        set_repo_policy: false

    - name: Get deploy folder based on branch
      id: deploy_folder
      run: |
        if [[ "$REF" == 'refs/heads/main' ]]
        then
            echo "::set-output name=deploy_folder::development"
        else
            echo "::set-output name=deploy_folder::development"
        fi
      env:
        REF: ${{ github.ref }}
        
  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v2
        with:
          repository: ConstellationBrands/tenant-example-cd
          token: ${{ secrets.RELEASE_TOKEN }}
      - run: echo ${{needs.build-and-push.outputs.version}}
      - run: echo ${{needs.build-and-push.outputs.deploy_folder}}
      - run: sed -i -E "s|(example-repo):.*|\1:\${{needs.build-and-push.outputs.version}}|" gitops/env/staging/${{needs.build-and-push.outputs.repo_name}}-${{needs.build-and-push.outputs.deploy_folder}}/cd-patch.yaml
      - run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add .
          git commit -m "update image version ${{needs.build-and-push.outputs.version}}"
          git push
